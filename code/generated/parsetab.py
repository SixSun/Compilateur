
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6C82688C91FB09FF682D95393793625A'
    
_lr_action_items = {'THONG':([0,21,26,76,83,104,109,110,],[1,1,1,1,1,1,1,1,]),'JEEZ':([0,26,76,83,104,109,110,],[2,2,2,2,2,2,2,]),'ADD_OP':([17,19,20,24,28,31,32,33,34,35,36,38,41,42,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,63,64,65,68,70,71,72,73,74,77,78,79,80,81,82,94,95,98,101,105,],[32,32,32,32,32,32,32,-22,52,-21,32,52,32,32,32,52,32,32,52,-24,32,32,52,32,32,32,32,32,32,32,52,52,52,52,52,-23,-19,-20,52,52,52,52,52,52,32,32,32,52,52,]),'HEYRICK':([88,117,],[98,98,]),'$end':([8,26,45,],[0,-1,-2,]),'WHALE':([0,26,66,76,83,104,109,110,],[3,3,87,3,3,3,3,3,]),'FATTER':([33,35,38,51,72,73,74,],[-22,-21,58,-24,-23,-19,-20,]),'NUMBER':([17,19,20,24,28,31,32,36,41,42,46,48,49,52,53,56,57,58,59,60,61,63,94,95,98,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'FATTEST':([33,35,38,51,72,73,74,],[-22,-21,61,-24,-23,-19,-20,]),'ISNOT':([33,35,38,51,72,73,74,],[-22,-21,56,-24,-23,-19,-20,]),'(':([2,3,4,11,17,19,20,24,28,31,32,36,41,42,46,48,49,52,53,56,57,58,59,60,61,63,87,94,95,98,],[19,20,21,25,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,95,31,31,31,]),'PAF':([26,33,35,43,45,51,72,73,74,77,78,79,80,81,82,92,93,96,113,114,118,],[-1,-22,-21,66,-2,-24,-23,-19,-20,-18,-17,-14,-16,-15,-13,99,100,103,116,-11,-12,]),'WUBBALUBBADUBDUBS':([0,26,76,83,104,109,110,],[4,4,4,4,4,4,4,]),'TINIER':([33,35,38,51,72,73,74,],[-22,-21,59,-24,-23,-19,-20,]),'MPFH':([0,21,26,76,83,104,109,110,],[6,6,6,6,6,6,6,6,]),':':([33,35,51,72,73,74,97,105,],[-22,-21,-24,-23,-19,-20,104,109,]),'TINIEST':([33,35,38,51,72,73,74,],[-22,-21,60,-24,-23,-19,-20,]),'ISIT':([0,21,26,76,83,104,109,110,],[7,7,7,7,7,7,7,7,]),')':([33,35,37,39,44,50,51,72,73,74,77,78,79,80,81,82,101,102,],[-22,-21,55,62,67,72,-24,-23,-19,-20,-18,-17,-14,-16,-15,-13,106,107,]),'IS':([33,35,38,51,72,73,74,],[-22,-21,57,-24,-23,-19,-20,]),'CANDO':([0,26,76,83,104,109,110,],[10,10,10,10,10,10,10,]),'SCHWIFT':([0,26,76,83,104,109,110,],[11,11,11,11,11,11,11,]),'DEFAULT':([88,117,],[97,97,]),'GOT':([14,18,22,23,27,29,30,],[28,36,41,42,46,48,49,]),'HEY':([0,21,26,76,83,104,109,110,],[13,13,13,13,13,13,13,13,]),'SHUTUPMORTY':([26,45,108,112,],[-1,-2,111,115,]),'SHOWMEWHATYOUGOT':([0,26,76,83,104,109,110,],[17,17,17,17,17,17,17,]),'FAKE':([0,21,26,76,83,104,109,110,],[15,15,15,15,15,15,15,15,]),'PIF':([10,55,62,67,106,],[24,76,83,88,110,]),'SCHMECKLE':([0,21,26,76,83,104,109,110,],[16,16,16,16,16,16,16,16,]),'MUL_OP':([33,34,35,38,47,50,51,54,64,65,68,70,71,72,73,74,77,78,79,80,81,82,101,105,],[-22,53,-21,53,53,53,-24,53,53,53,53,53,53,-23,53,-20,53,53,53,53,53,53,53,53,]),'~':([5,9,12,33,34,35,40,47,51,54,64,65,68,69,70,71,72,73,74,75,77,78,79,80,81,82,84,85,86,89,90,91,99,100,103,107,111,115,116,],[-4,-3,26,-22,-5,-21,63,69,-24,75,85,86,89,-31,90,91,-23,-19,-20,-26,-18,-17,-14,-16,-15,-13,94,-29,-27,-25,-30,-28,-7,-6,-10,-9,114,117,-8,]),'IDENTIFIER':([0,1,6,7,13,15,16,17,19,20,21,24,25,26,28,31,32,36,41,42,46,48,49,52,53,56,57,58,59,60,61,63,76,83,94,95,98,104,109,110,],[14,18,22,23,27,29,30,33,33,33,14,33,44,14,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,14,14,33,33,33,14,14,14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'cases':([88,117,],[96,118,]),'condition':([19,20,24,63,95,],[37,39,43,84,102,]),'structure':([0,26,76,83,104,109,110,],[5,5,5,5,5,5,5,]),'program':([0,26,76,83,104,109,110,],[8,45,92,93,108,112,113,]),'assignation':([0,21,26,76,83,104,109,110,],[9,40,9,9,9,9,9,9,]),'statement':([0,26,76,83,104,109,110,],[12,12,12,12,12,12,12,]),'expression':([17,19,20,24,28,31,32,36,41,42,46,48,49,52,53,56,57,58,59,60,61,63,94,95,98,],[34,38,38,38,47,50,51,54,64,65,68,70,71,73,74,77,78,79,80,81,82,38,101,38,105,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement ~','program',2,'p_program_statement','parser_schwift.py',27),
  ('program -> statement ~ program','program',3,'p_program_statement','parser_schwift.py',28),
  ('statement -> assignation','statement',1,'p_statement','parser_schwift.py',36),
  ('statement -> structure','statement',1,'p_statement','parser_schwift.py',37),
  ('statement -> SHOWMEWHATYOUGOT expression','statement',2,'p_statement','parser_schwift.py',38),
  ('structure -> WHALE ( condition ) PIF program PAF','structure',7,'p_structure','parser_schwift.py',46),
  ('structure -> JEEZ ( condition ) PIF program PAF','structure',7,'p_structure','parser_schwift.py',47),
  ('structure -> WUBBALUBBADUBDUBS ( assignation ~ condition ~ expression ) PIF program PAF','structure',11,'p_structure_for','parser_schwift.py',51),
  ('structure -> CANDO PIF condition PAF WHALE ( condition )','structure',8,'p_structure_do','parser_schwift.py',56),
  ('structure -> SCHWIFT ( IDENTIFIER ) PIF cases PAF','structure',7,'p_structure_switch','parser_schwift.py',61),
  ('cases -> DEFAULT : program SHUTUPMORTY ~','cases',5,'p_structure_cases','parser_schwift.py',66),
  ('cases -> HEYRICK expression : program SHUTUPMORTY ~ cases','cases',7,'p_structure_cases','parser_schwift.py',67),
  ('condition -> expression FATTEST expression','condition',3,'p_condition','parser_schwift.py',72),
  ('condition -> expression FATTER expression','condition',3,'p_condition','parser_schwift.py',73),
  ('condition -> expression TINIEST expression','condition',3,'p_condition','parser_schwift.py',74),
  ('condition -> expression TINIER expression','condition',3,'p_condition','parser_schwift.py',75),
  ('condition -> expression IS expression','condition',3,'p_condition','parser_schwift.py',76),
  ('condition -> expression ISNOT expression','condition',3,'p_condition','parser_schwift.py',77),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser_schwift.py',83),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser_schwift.py',84),
  ('expression -> NUMBER','expression',1,'p_expression_number_or_identifier','parser_schwift.py',89),
  ('expression -> IDENTIFIER','expression',1,'p_expression_number_or_identifier','parser_schwift.py',90),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser_schwift.py',95),
  ('expression -> ADD_OP expression','expression',2,'p_expression_minus','parser_schwift.py',100),
  ('assignation -> HEY IDENTIFIER GOT expression ~','assignation',5,'p_assign','parser_schwift.py',106),
  ('assignation -> THONG IDENTIFIER GOT expression ~','assignation',5,'p_assign','parser_schwift.py',107),
  ('assignation -> ISIT IDENTIFIER GOT expression ~','assignation',5,'p_assign','parser_schwift.py',108),
  ('assignation -> SCHMECKLE IDENTIFIER GOT expression ~','assignation',5,'p_assign','parser_schwift.py',109),
  ('assignation -> MPFH IDENTIFIER GOT expression ~','assignation',5,'p_assign','parser_schwift.py',110),
  ('assignation -> FAKE IDENTIFIER GOT expression ~','assignation',5,'p_assign','parser_schwift.py',111),
  ('assignation -> IDENTIFIER GOT expression ~','assignation',4,'p_reassign','parser_schwift.py',116),
]
